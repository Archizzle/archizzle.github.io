<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Project 2 Submission]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Project 2 Submission</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 02 Oct 2024 01:17:05 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 02 Oct 2024 01:17:03 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[CS 180 Project 2]]></title><description><![CDATA[ 
 <br><br>The finite difference kernel was used in the x and y directions to find the partial derivatives with respect to x and y. Those results were then treated as a 2D vector, and its magnitude was produced by finding its L2 norm. We then  In other words, if the image was denoted by , its gradient/edges, , is computed by<br><br>Then we threshold this value to remove as much noise as possible without compromising the true edges.<br><br><br>Since the image is still somewhat noisy, smoothing/blurring the image prior to convolving with the finite difference kernel helps remove some of that noise. Essentially, given a gaussian kernel , we have<br><br>Because convolution is associative, we can either:<br>
<br>Apply the gaussian filter to the image and then find the gradients of the blurred image
<br>Compute the derivative of the gaussian (DoG) by convolving the finite difference operators with the gaussian filter. Then, we can directly convolve the DoG filter to the image.<br>
The results are as follows:
<br><br>Notice that the results are less noisy, and produce practically identical.<br><br>The approach is to filter the high frequency values, and emphasize them by "adding" it to the original image. To find the high frequency values, we compute details = image - blurred, and thus our result becomes image + alpha * details, where alpha is a tunable constant. This can be computed by performing a single convolution. If we denote  as the identity convolution (an odd kernel with all zeros except for the center element being 1).<br><br><br><br>The details of the tiles and path are much more prominent in the  case, and overemphasized in the  case.<br><br>Again, here we can see that the mountain's features are more visible.<br><br>Taking the image of the pyramids, I blurred it to see if the process could add back in some of the details lost in the process.<br><br>The reconstructed image has quite a few artifacts since a lot of the finer details are lost to the blurring process. However, most of the features aren't washed away, unlike the blurred image.<br><br>To achieve a blurred image, I overlayed a low frequency and high frequency image. The low frequency image was produced by applying a gaussian blur. For the high frequency image, I took the difference between the original image and a blurred image.<br><br>I utilized a sigma of 12 for the low frequency and 6 for the high frequency. <br><br><img alt="Pasted image 20240929191741.png" src="pasted-image-20240929191741.png" style="width: 400px; max-width: 100%;"><br>These are the Fourier transforms of each step of the process<br><br><img alt="Pasted image 20240929192123.png" src="pasted-image-20240929192123.png" style="width: 400px; max-width: 100%;"><br><br>This set of images just didn't seem to work since the retro Mario was much larger than the modern Mario. As such, a lot of the details got washed away in the background.<br><br><br>Each level of the Gaussian stack is produced by blurring the previous level. The Laplacian stack is formed by taking differences of adjacent layers of the Gaussian stack. The last layer of the Gaussian stack is appended to the end of the Laplacian stack, so both end up with the same number of layers.<br>Pictured are layers 0, 2, and 4 of each layer of the Laplacian stack.<br><br>End Result - Oraple:<br>
<img alt="Pasted image 20240930233214.png" src="pasted-image-20240930233214.png" style="width: 400px; max-width: 100%;"><br><br><br>Result:<br>
<img alt="Pasted image 20240930235321.png" src="pasted-image-20240930235321.png" style="width: 400px; max-width: 100%;"><br><br><br>Result:<br>
<img alt="Pasted image 20241001171524.png" src="pasted-image-20241001171524.png" style="width: 400px; max-width: 100%;">]]></description><link>cs-180-project-2.html</link><guid isPermaLink="false">CS 180 Project 2.md</guid><pubDate>Wed, 02 Oct 2024 00:52:04 GMT</pubDate><enclosure url="pasted-image-20240926233910.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;pasted-image-20240926233910.png&quot;&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>